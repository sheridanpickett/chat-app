{"ast":null,"code":"var _jsxFileName = \"/Users/sheridan/Desktop/react-socket/client/src/App.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport LoadingDots from './components/LoadingDots';\nimport InputAndSubmitField from './components/InputAndSubmitField';\nconst socket = socketIOClient('http://127.0.0.1:4000');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messages: [],\n      message: '',\n      name: '',\n      socketID: '',\n      location: {},\n      loading: true,\n      userSubmitted: false,\n      userList: ''\n    };\n\n    this.setName = e => {\n      this.setState({\n        name: e.target.value\n      });\n    };\n\n    this.submitUser = async e => {\n      e.preventDefault();\n      this.setState({\n        userSubmitted: true\n      });\n\n      if (this.state.name !== '') {\n        try {\n          let userList = await fetch('http://127.0.0.1:4000/createUser', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              name: this.state.name,\n              socketID: this.state.socketID,\n              location: {\n                type: \"Point\",\n                coordinates: [this.state.location.lon, this.state.location.lat]\n              }\n            })\n          });\n          this.setState({\n            userList\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    };\n\n    this.renderUserList = () => {\n      this.state.userList.map(user => {\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, user.name);\n      });\n    };\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log('location found');\n      this.setState({\n        location: {\n          lon: position.coords.longitude,\n          lat: position.coords.latitude\n        },\n        loading: false\n      });\n    });\n    socket.on('connect', () => {\n      this.setState({\n        socketID: socket.id\n      });\n    }); // socket.emit('create', prompt());\n\n    socket.on('chat message', msg => {\n      this.setState(previousState => ({\n        messages: [...previousState.messages, msg]\n      }));\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          userSubmitted = _this$state.userSubmitted,\n          userList = _this$state.userList;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, loading && React.createElement(LoadingDots, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), !loading && !userSubmitted && React.createElement(InputAndSubmitField, {\n      placeholder: \"Enter your name\",\n      name: this.state.name,\n      setName: this.setName,\n      submitUser: this.submitUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), userList) // \t<form>\n    // \t\t<input type=\"text\" value={this.state.message} onChange={ ({target}) => this.setState({message: target.value}) } />\n    // \t\t<button type=\"submit\" onClick={e => {\n    // \t\t\te.preventDefault();\n    // \t\t\tsocket.emit('chat message', this.state.message);\n    // \t\t\tthis.setState({message: \"\"})\n    // \t\t}} />\n    // \t</form>\n    ;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sheridan/Desktop/react-socket/client/src/App.js"],"names":["React","Component","socketIOClient","LoadingDots","InputAndSubmitField","socket","App","state","messages","message","name","socketID","location","loading","userSubmitted","userList","setName","e","setState","target","value","submitUser","preventDefault","fetch","method","headers","body","JSON","stringify","type","coordinates","lon","lat","err","console","log","renderUserList","map","user","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","on","id","msg","previousState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport LoadingDots from './components/LoadingDots';\nimport InputAndSubmitField from './components/InputAndSubmitField';\n\nconst socket = socketIOClient('http://127.0.0.1:4000');\n\n\nclass App extends Component {\n\tstate = {\n\t\tmessages: [],\n\t\tmessage: '',\n\t\tname: '',\n\t\tsocketID: '',\n\t\tlocation: {},\n\t\tloading: true,\n\t\tuserSubmitted: false,\n\t\tuserList: ''\n\t};\n\n\tcomponentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\tconsole.log('location found')\n\t\t\tthis.setState({\n\t\t\t\tlocation: {\n\t\t\t\t\tlon: position.coords.longitude,\n\t\t\t\t\tlat: position.coords.latitude\n\t\t\t\t},\n\t\t\t\tloading: false\n\t\t\t})\n\t\t});\n\n\t\tsocket.on('connect', () => {\n\t\t\tthis.setState({socketID: socket.id});\n\t\t})\n\t\t// socket.emit('create', prompt());\n\t\tsocket.on('chat message', msg => {\n\t\t\tthis.setState(previousState => ({\n\t\t\t    messages: [...previousState.messages, msg]\n\t\t\t}));\n\t\t});\n\t}\n\n\tsetName = e => {\n\t\tthis.setState({ name: e.target.value })\n\t}\n\n\tsubmitUser = async e => {\n\t\te.preventDefault()\n\t\tthis.setState({userSubmitted: true});\n\t\tif (this.state.name !== ''){\n\t\t\ttry {\n\t\t\t\tlet userList = await fetch('http://127.0.0.1:4000/createUser', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tname: this.state.name,\n\t\t\t\t\t\tsocketID: this.state.socketID,\n\t\t\t\t\t\tlocation: {\n\t\t\t\t\t\t\ttype: \"Point\",\n\t\t\t\t\t\t\tcoordinates: [this.state.location.lon, this.state.location.lat]\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\tthis.setState({userList})\n\t\t\t} catch(err) {\n\t\t\t\tconsole.log(err)\n\t\t\t}\n\t\t}\n\t}\n\n\trenderUserList = () => {\n\t\tthis.state.userList.map(user => {\n\t\t\t<div>{user.name}</div>\n\t\t})\n\t}\n\n  render() {\n\t\tconst { loading, userSubmitted, userList } = this.state;\n    return (\n\t\t\t<div>\n\t\t\t\t{loading &&\n\t\t\t\t\t<LoadingDots />}\n\t\t\t\t{(!loading && !userSubmitted) &&\n\t\t\t\t\t<InputAndSubmitField\n\t\t\t\t\t\tplaceholder=\"Enter your name\"\n\t\t\t\t\t\tname={this.state.name}\n\t\t\t\t\t\tsetName={this.setName}\n\t\t\t\t\t\tsubmitUser={this.submitUser}\n\t\t\t\t\t/>}\n\t\t\t\t{userList}\n\t\t\t</div>\n\t\t\t// \t<form>\n\t\t\t// \t\t<input type=\"text\" value={this.state.message} onChange={ ({target}) => this.setState({message: target.value}) } />\n\t\t\t// \t\t<button type=\"submit\" onClick={e => {\n\t\t\t// \t\t\te.preventDefault();\n\t\t\t// \t\t\tsocket.emit('chat message', this.state.message);\n\t\t\t// \t\t\tthis.setState({message: \"\"})\n\t\t\t// \t\t}} />\n\t\t\t// \t</form>\n\t\t)\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}